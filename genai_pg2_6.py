# -*- coding: utf-8 -*-
"""GenAI_Pg2-6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8xs1smQN88FE6P9UE_o3vPnDXb8f7Y2
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from gensim.models import KeyedVectors

# Load pre-trained GloVe embeddings (100d model)
model_100d = KeyedVectors.load_word2vec_format("/content/drive/MyDrive/GenAI/glove.6B.50d.word2vec.txt", binary=False)

# Select 10 words from a specific domain (sports) # Included other words to show how embeddings are different
words = ['football', 'soccer', 'basketball',
'tennis','engineer','information', 'baseball', 'coach', 'goal',
'player', 'referee', 'team']
word_vectors = np.array([model_100d[word] for word in words])

# Dimensionality reduction using PCA
# Using PCA to reduce to 2D for visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(word_vectors)

# Plotting the words in 2D space
plt.figure(figsize=(10, 8))
for i, word in enumerate(words):
  plt.scatter(pca_result[i, 0], pca_result[i, 1])
  plt.text(pca_result[i, 0] + 0.02, pca_result[i, 1], word, fontsize=12)
plt.title("PCA Visualization of Sports-related Word Embeddings (100d)")
plt.xlabel("PCA Dimension 1")
plt.ylabel("PCA Dimension 2")
plt.show()
# 5 Semantically Similar Words Generator Function
def get_similar_words(word, model, topn=5):
  similar_words = model.similar_by_word(word, topn=topn)
  return similar_words
# Example: Get 5 words similar to "football"
similar_words_football = get_similar_words('football', model_100d, topn=5)
print(f"Words similar to 'football': {similar_words_football}")

# Select the words you want to print embeddings for
words_to_print = ['football', 'soccer']

# Print their embeddings
for word in words_to_print:
    if word in model_100d:
        print(f"Vector embedding for '{word}':\n{model_100d[word]}\n")
    else:
        print(f"Word '{word}' not found in the embeddings model.")

from google import genai

client = genai.Client(api_key="AIzaSyCBWw5j5jzttU1v-9_E0s7CtwyZR4-7xos")
response = client.models.generate_content(
    model="gemini-2.0-flash", contents="Explain how AI works"
)
print(response.text)

"""# **PROGRAM 4**

Use word embeddings to improve prompts for Generative AI model. Retrieve similar words
using word embeddings. Use the similar words to enrich a GenAI prompt. Use the AI model to
generate responses for the original and enriched prompts. Compare the outputs in terms of detail and
relevance.
"""

pip install transformers -U

from gensim.scripts.glove2word2vec import glove2word2vec
from gensim.models import KeyedVectors

# Paths to the GloVe file and output Word2Vec file
glove_input_file = "/content/drive/MyDrive/GenAI/glove.6B.100d.txt"  # Path to GloVe file
word2vec_output_file = "/content/drive/MyDrive/GenAI/glove.6B.50d.word2vec.txt"  # Output file in Word2Vec format

# Convert GloVe format to Word2Vec format
glove2word2vec(glove_input_file, word2vec_output_file)

# Load the converted Word2Vec model
model = KeyedVectors.load_word2vec_format(word2vec_output_file,
binary=False)

# Test the loaded model
print(model.most_similar("king"))

# Define the original medical prompt
original_prompt = "Explain the importance of vaccinations in healthcare."

# Define key terms extracted from the original prompt
key_terms = ["vaccinations", "healthcare"]

# Initialize an empty list to store similar terms
similar_terms = []


# Loop through each key term to find similar words
for term in key_terms:
    # Check if the key term exists in the vocabulary of the 'model'(word embedding model)
    # Assuming 'model.key_to_index' is a way to check for term existence in the model's vocabulary
    if term in model.key_to_index:
        similar_terms.extend({word for word, _ in
model.most_similar(term, topn=3)})

# Enrich the original prompt with the retrieved similar terms
if similar_terms:
    # If similar terms were found, create an enriched prompt by appending
    # "Consider aspects like: " followed by a comma-separated string of similar terms.
    enriched_prompt = f"{original_prompt} Consider aspects like: {', '.join(similar_terms)}."
else:
    # If no similar terms were found, the enriched prompt is the same as the original prompt.
    enriched_prompt = original_prompt

# Output the original and enriched prompts
print("Original Prompt:", original_prompt)
print("Enriched Prompt:", enriched_prompt)

import getpass
import os
GOOGLE_API_KEY= os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter your Google AI API key: ")

!pip install langchain_google_genai

from langchain_google_genai import ChatGoogleGenerativeAI
llm = ChatGoogleGenerativeAI(
  model="gemini-2.0-flash-exp",
  temperature=0,
  api_key=GOOGLE_API_KEY,
  max_tokens=256,
  timeout=None,
  max_retries=2,
  # other params...
)

llm.invoke("Hi")

print(llm.invoke(original_prompt).content)

"""# **Program 5**"""

!pip install sentence_transformers

!pip install langchain-huggingface

!pip install tf-keras --user

!pip install numpy==1.24.4 --user

from sentence_transformers import SentenceTransformer, util

# Load a pretrained SentenceTransformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Define an expanded finance-related corpus
corpus = [
    "The stock market saw significant gains today, driven by strong earnings reports.",
    "Investing in diversified portfolios helps mitigate risk and maximize returns.",
    "The Federal Reserve's decision to raise interest rates could impact market liquidity.",
    "Cryptocurrency has become an increasingly popular asset classamong investors.",
    "Financial analysts predict that the global economy will face challenges in the coming years.",
    "Bonds are considered a safer investment option compared to stocks.",
    "Banks are adopting blockchain technology to improve the efficiency of financial transactions.",
    "The economic impact of the pandemic has been severe, but recovery is underway.",
    "Inflation rates have been rising steadily, leading to higher costs or consumers.",
    "Corporate governance and transparency are crucial for investor confidence.",
    "The real estate market is experiencing a boom as demand outstrips supply in many areas.",
     "Investors should be aware of market volatility and adjust their strategies accordingly.",
    "Diversification is a key principle in reducing risk in investment portfolios.",
    "Hedge funds use complex strategies to generate high returns, often with higher risks.",
    "Stock buybacks are often seen as a sign of confidence by corporate executives."
]

# Encode the corpus into embeddings
corpus_embeddings = model.encode(corpus, convert_to_tensor=True)
print(corpus_embeddings )

# Function to generate a story using contextual embeddings
def generate_paragraph(seed_word, corpus, corpus_embeddings, model, top_n=5):
    # Encode the seed word as a sentence
    seed_sentence = f"Tell me more about {seed_word} in finance."
    seed_embedding = model.encode(seed_sentence, convert_to_tensor=True)

    # Find the most similar sentences in the corpus to the seed sentence
    similarities = util.pytorch_cos_sim(seed_embedding, corpus_embeddings)[0]
    top_results = similarities.topk(top_n)
    print('top_results:',top_results)
    # Construct a more coherent story using the most similar sentences
    story = f"The topic of '{seed_word}' is crucial in the finance industry. "

    for idx in top_results.indices:
        similar_sentence = corpus[idx]
        story += f"{similar_sentence} "

    story += f"These concepts highlight the importance of {seed_word} in understanding financial markets and investment strategies."
    return story

seed_word = "bonds"
story = generate_paragraph(seed_word, corpus, corpus_embeddings, model, top_n=5)
print(story)

"""---------------------------------------------------------------------------------------

# **Program 6**
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade --quiet huggingface_hub
# %pip install --upgrade langchain
from transformers import pipeline
# Load the sentiment analysis pipeline
sentiment_analyzer = pipeline("sentiment-analysis")
# Example sentences for analysis
sentences = [
"The product quality is amazing! I'm very satisfied.",
"I had a terrible experience with customer service.",
"The delivery was quick, but the packaging was damaged.",
"Absolutely love this! Best purchase I've made.",
"Not worth the money, very disappointed."
]
# Analyze sentiment for each sentence
results = sentiment_analyzer(sentences)
# Print the results
for sentence, result in zip(sentences, results):
  print(f"Sentence: {sentence}\nSentiment: {result['label']}, Confidence: {result['score']:.2f}\n")

results

#Huggingface API Token
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



"""# **Program 7**"""

!pip install transformers -U
from transformers import pipeline
# Load the summarization pipeline
summarizer = pipeline("summarization")
# Expanded input passage
text = """
Artificial Intelligence (AI) is transforming education by introducing adaptive learning
techniques, automating administrative processes, and enabling intelligent tutoring systems.
AI-driven learning platforms analyze vast amounts of student data, including learning habits,
strengths, and weaknesses, to personalize educational experiences.  This customization
allows students to progress at their own pace, ensuring that they receive content suited to
their proficiency level. Additionally, AI chatbots and virtual assistants are becoming common
in academic institutions, providing real-time support to students. These tools answer
frequently asked questions, guide students through complex topics, and help with scheduling
and reminders. Educators also benefit from AI-powered grading systems that assess
assignments, quizzes, and exams, significantly reducing workload and providing instant
feedback. Moreover, AI enhances accessibility in education by offering language translation
services, speech-to-text conversion, and assistive technologies for students with disabilities.
By breaking language barriers and supporting diverse learning needs, AI makes education
more inclusive. However, challenges remain in implementing AI in education. Data privacy
concerns arise as student information is collected and analyzed, requiring robust security
measures. There is also the risk of AI biases, where algorithmic decisions may favor certain
groups over others due to biased training data. Additionally, educators must undergo proper
training to integrate AI effectively into their teaching methods. To fully harness AI’s
potential in education, institutions must adopt ethical AI frameworks, ensure transparency in
algorithmic decision-making, and continuously update their technological infrastructure.
Collaboration between educators, policymakers, and AI developers is crucial in shaping the
future of education and ensuring that AI serves as an enabler rather than a disruptor."""
# Generate the summary with longer output
summary = summarizer(long_text, max_length=100, min_length=50, do_sample=False)
# Print the summarized text
print("Summarized Text:\n", summary[0]['summary_text'])

!pip uninstall torch torchvision torchaudio -y
!pip uninstall transformers sentence_transformers -y

!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
!pip install transformers -U
!pip install sentence_transformers

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade --quiet huggingface_hub
# %pip install --upgrade langchain
!pip install transformers -U
!pip install sentence_transformers
from transformers import pipeline
# Load the summarization pipeline, explicitly specifying a model
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")  # Specify the model here

# Expanded input passage
text = """
Artificial Intelligence (AI) is transforming education by introducing adaptive learning
techniques, automating administrative processes, and enabling intelligent tutoring systems.
AI-driven learning platforms analyze vast amounts of student data, including learning habits,
strengths, and weaknesses, to personalize educational experiences.  This customization
allows students to progress at their own pace, ensuring that they receive content suited to
their proficiency level. Additionally, AI chatbots and virtual assistants are becoming common
in academic institutions, providing real-time support to students. These tools answer
frequently asked questions, guide students through complex topics, and help with scheduling
and reminders. Educators also benefit from AI-powered grading systems that assess
assignments, quizzes, and exams, significantly reducing workload and providing instant
feedback. Moreover, AI enhances accessibility in education by offering language translation
services, speech-to-text conversion, and assistive technologies for students with disabilities.
By breaking language barriers and supporting diverse learning needs, AI makes education
more inclusive. However, challenges remain in implementing AI in education. Data privacy
concerns arise as student information is collected and analyzed, requiring robust security
measures. There is also the risk of AI biases, where algorithmic decisions may favor certain
groups over others due to biased training data. Additionally, educators must undergo proper
training to integrate AI effectively into their teaching methods. To fully harness AI’s
potential in education, institutions must adopt ethical AI frameworks, ensure transparency in
algorithmic decision-making, and continuously update their technological infrastructure.
Collaboration between educators, policymakers, and AI developers is crucial in shaping the
future of education and ensuring that AI serves as an enabler rather than a disruptor."""
# Generate the summary with longer output
summary = summarizer(text, max_length=100, min_length=50, do_sample=False) # Pass the 'text' variable here
# Print the summarized text
print("Summarized Text:\n", summary[0]['summary_text'])

!pip uninstall torch torchvision torchaudio -y
!pip uninstall transformers sentence_transformers -y

!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
!pip install transformers -U
!pip install sentence_transformers

!pip install transformers -U
from transformers import pipeline
# Load the summarization pipeline, explicitly specifying a model
summarizer = pipeline("summarization")

# Expanded input passage
text = """
Artificial Intelligence (AI) is transforming education by introducing adaptive learning
techniques, automating administrative processes, and enabling intelligent tutoring systems.
AI-driven learning platforms analyze vast amounts of student data, including learning habits,
strengths, and weaknesses, to personalize educational experiences.  This customization
allows students to progress at their own pace, ensuring that they receive content suited to
their proficiency level. Additionally, AI chatbots and virtual assistants are becoming common
in academic institutions, providing real-time support to students. These tools answer
frequently asked questions, guide students through complex topics, and help with scheduling
and reminders. Educators also benefit from AI-powered grading systems that assess
assignments, quizzes, and exams, significantly reducing workload and providing instant
feedback. Moreover, AI enhances accessibility in education by offering language translation
services, speech-to-text conversion, and assistive technologies for students with disabilities.
By breaking language barriers and supporting diverse learning needs, AI makes education
more inclusive. However, challenges remain in implementing AI in education. Data privacy
concerns arise as student information is collected and analyzed, requiring robust security
measures. There is also the risk of AI biases, where algorithmic decisions may favor certain
groups over others due to biased training data. Additionally, educators must undergo proper
training to integrate AI effectively into their teaching methods. To fully harness AI’s
potential in education, institutions must adopt ethical AI frameworks, ensure transparency in
algorithmic decision-making, and continuously update their technological infrastructure.
Collaboration between educators, policymakers, and AI developers is crucial in shaping the
future of education and ensuring that AI serves as an enabler rather than a disruptor."""
# Generate the summary with longer output
summary = summarizer(text, max_length=100, min_length=50, do_sample=False) # Pass the 'text' variable here
# Print the summarized text
print("Summarized Text:\n", summary[0]['summary_text'])

!pip install langchain-huggingface

from langchain_huggingface import HuggingFaceEndpoint
from getpass import getpass
HUGGINGFACEHUB_API_TOKEN = getpass()
import os
os.environ["HUGGINGFACEHUB_API_TOKEN"] = HUGGINGFACEHUB_API_TOKEN
text = f"""Artificial Intelligence (AI) has emerged as a cornerstone of innovation in
education, fundamentally reshaping how knowledge is delivered, personalized, and assessed.
As institutions increasingly integrate AI into their pedagogical frameworks, the impact
extends beyond automation to the creation of intelligent learning environments that foster
engagement, accessibility, and efficiency.
One of the most profound contributions of AI to education is adaptive learning, a paradigm
that leverages data-driven insights to customize educational content for individual students.
Unlike traditional one-size-fits-all approaches, AI-powered platforms analyze student
performance, learning patterns, and cognitive preferences to adjust the difficulty level, pace,
and mode of instruction in real-time. This ensures that students who struggle with certain
concepts receive targeted reinforcement, while advanced learners can progress without
unnecessary repetition.
Intelligent tutoring systems (ITS) represent another significant advancement, providing
students with personalized, AI-driven guidance outside of traditional classroom settings.
These systems, built on natural language processing and machine learning, simulate human
tutors by offering step-by-step explanations, identifying gaps in understanding, and adapting
instructional methods accordingly. AI tutors are particularly valuable in disciplines such as
mathematics, science, and language learning, where real-time feedback and iterative
problem-solving are crucial to mastery.
Beyond individualized learning, AI enhances collaborative education by fostering interactive,
technology-driven experiences. Virtual reality (VR) and augmented reality (AR) applications,
powered by AI algorithms, create immersive simulations that enable students to explore
historical events, conduct virtual science experiments, and engage in role-based learning.
These innovations bridge the gap between theoretical knowledge and practical application,
making complex concepts more tangible and accessible.
AI also plays a critical role in automating administrative functions, thereby allowing
educators to allocate more time to teaching and mentorship. Automated grading systems can
evaluate assignments, quizzes, and even subjective responses with increasing accuracy, while
AI-driven scheduling tools streamline academic operations. Additionally, AI chatbots and
virtual assistants handle routine queries from students, reducing response times and
improving administrative efficiency.
One of the most significant yet underexplored benefits of AI in education is its potential to
enhance accessibility and inclusivity. Speech-to-text and text-to-speech technologies enable
students with disabilities to engage with learning materials more effectively. AI-driven
translation services remove language barriers, allowing students from diverse linguistic
backgrounds to access high-quality educational content. Moreover, AI-powered predictive
analytics can identify students at risk of falling behind, enabling early interventions to
prevent academic disengagement.
Despite these advantages, AI's integration into education is not without challenges. Ethical
concerns surrounding data privacy, bias in AI algorithms, and the digital divide must be
addressed to ensure equitable access to AI-driven education. Institutions must adopt
transparent AI governance policies, emphasizing accountability and inclusivity in algorithmic
decision-making. Additionally, educators must be equipped with the necessary training to
effectively implement AI tools within their instructional practices, ensuring that technology
serves as an enabler rather than a disruptor.
As AI continues to evolve, its role in education will extend beyond content delivery to
fostering critical thinking, creativity, and problem-solving skills. The future of education lies
not in replacing human educators but in augmenting their capabilities, enabling a more
engaging, efficient, and personalized learning experience for students worldwide. By striking
a balance between technological innovation and ethical responsibility, AI has the potential to
democratize education and bridge learning gaps on a global scale.
"""
# import requests
# API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
# headers = {"Authorization": "Bearer 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"}
# def query(payload):
#   response = requests.post(API_URL, headers=headers, json=payload)
#   return response.json()
# output = query({"inputs": text})  # Remove the curly braces

import requests
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
headers = {"Authorization": f"Bearer {HUGGINGFACEHUB_API_TOKEN}"}  # Use correct token format in header

def query(payload):
  response = requests.post(API_URL, headers=headers, json=payload)
  return response.json()
output = query({"inputs": text})  # Remove the curly braces
# Check if the output contains an error message
if 'error' in output:
    print(f"Error: {output['error']}")
    # Handle the error, e.g., raise an exception, log the error, etc.
    # You might need to re-authenticate or check your API token
else:
    # Print or process the output
    print(output[0]['summary_text'])

print(output[0]['summary_text'])



"""# **Program 8**"""

#Cohere API Key
# YAm4fSuTZjRmOllqakhi4puUj2fS6io9kJYeQB9I

!pip install langchain langchain-cohere langchain-community

!pip install gdown

import getpass
import os

if not os.environ.get("COHERE_API_KEY"):
    os.environ["COHERE_API_KEY"] = getpass.getpass("Enter API key for Cohere: ")

from langchain_cohere import ChatCohere

model = ChatCohere(model="command-r7b-12-2024")

from langchain_core.prompts import ChatPromptTemplate

prompt = ChatPromptTemplate.from_template("Tell me a quote on the {topic}")
chain = prompt | model

chain.invoke({"topic": "AI"}).content

import gdown

# Google Drive file ID (Extract from the URL)
file_id = "1e8xs1smQN88FE6P9UE_o3vPnDXb8f7Y2"
file_path = "/content/drive/MyDrive/GenAI/ai_agents_info.txt"

# Download the file
gdown.download(f"https://drive.google.com/uc?export=download&id={file_id}", file_path, quiet=False)

# Read the file
with open(file_path, "r", encoding="utf-8") as file:
    document_text = file.read()

print(document_text)

from langchain_core.prompts import ChatPromptTemplate
prompt = ChatPromptTemplate.from_template("Extract and list the types of AI agents as bullet points from the following text:{document_text}")
chain = prompt | model
print(chain.invoke({"document_text": document_text}).content)

